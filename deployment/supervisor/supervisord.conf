; supervisord.conf
; DataGenius PRO â€” multi-process supervisor (API + UI + optional scheduler [+ optional nginx])
; Works well inside a single container. Prefer separate nginx container in k8s/compose.
; Use env vars to tweak ports, paths, workers, etc.

[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700

[supervisord]
logfile=/var/log/supervisor/supervisord.log
logfile_maxbytes=20MB
logfile_backups=5
pidfile=/tmp/supervisord.pid
childlogdir=/var/log/supervisor
minfds=1024
minprocs=200
nocleanup=true

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

; -----------------------------
; Program: FastAPI backend (Gunicorn+UvicornWorker)
; -----------------------------
[program:api]
; You can override APP_MODULE if your ASGI app module differs (e.g. "server.app:app")
; Also override API_PORT, API_HOST, GUNICORN_WORKERS, API_TIMEOUT via env.
command=/bin/sh -c 'exec gunicorn ${APP_MODULE:-app:app} \
  -k uvicorn.workers.UvicornWorker \
  -w ${GUNICORN_WORKERS:-2} \
  --bind ${API_HOST:-0.0.0.0}:${API_PORT:-8000} \
  --timeout ${API_TIMEOUT:-180} \
  --graceful-timeout ${API_GRACEFUL_TIMEOUT:-30} \
  --log-level ${API_LOG_LEVEL:-info}'
directory=/app
environment=PYTHONUNBUFFERED=1
autostart=true
autorestart=true
startsecs=5
stopwaitsecs=60
stopsignal=INT
killasgroup=true
stopasgroup=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
priority=10

; -----------------------------
; Program: Streamlit UI
; -----------------------------
[program:ui]
; STREAMLIT_ENTRYPOINT defaults to ui/app.py (adjust to your file)
command=/bin/sh -c 'exec streamlit run ${STREAMLIT_ENTRYPOINT:-ui/app.py} \
  --server.address=${UI_HOST:-0.0.0.0} \
  --server.port=${UI_PORT:-8501} \
  --server.headless=true \
  --server.enableCORS=false \
  --server.enableXsrfProtection=false \
  --browser.gatherUsageStats=false'
directory=/app
environment=PYTHONUNBUFFERED=1,STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
autostart=true
autorestart=true
startsecs=5
stopwaitsecs=60
stopsignal=INT
killasgroup=true
stopasgroup=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
priority=20

; -----------------------------
; Program: Retraining / Monitoring Scheduler (optional)
; -----------------------------
[program:scheduler]
; Provide SCHEDULER_ENTRYPOINT if your path differs
; Example candidates:
;   agents/monitoring/retraining_scheduler.py
;   services/retraining_scheduler.py
;   tools/retraining_scheduler.py
command=/bin/sh -c 'exec python -u ${SCHEDULER_ENTRYPOINT:-agents/monitoring/retraining_scheduler.py}'
directory=/app
autostart=${ENABLE_SCHEDULER:-false}
autorestart=true
startsecs=5
stopwaitsecs=30
stopsignal=INT
killasgroup=true
stopasgroup=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
priority=30

; -----------------------------
; Program: Nginx (optional, only if you bundle proxy in same container)
; Prefer separate nginx container in production.
; -----------------------------
[program:nginx]
command=/bin/sh -c 'exec nginx -g "daemon off;"'
autostart=${ENABLE_NGINX:-false}
autorestart=true
startsecs=3
stopwaitsecs=10
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
priority=5

; -----------------------------
; Group for convenience control
; -----------------------------
[group:datagenius]
programs=api,ui,scheduler,nginx
priority=1
