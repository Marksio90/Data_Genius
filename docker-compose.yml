version: '3.8'

services:
  # Main DataGenius PRO application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: datagenius-pro
    ports:
      - "8501:8501"  # Streamlit
      - "8000:8000"  # FastAPI (if enabled)
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://datagenius:datagenius_password@postgres:5432/datagenius_pro
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./reports:/app/reports
    depends_on:
      - postgres
      - redis
    networks:
      - datagenius-network
    restart: unless-stopped
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: datagenius-postgres
    environment:
      - POSTGRES_DB=datagenius_pro
      - POSTGRES_USER=datagenius
      - POSTGRES_PASSWORD=datagenius_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schemas:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - datagenius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U datagenius"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: datagenius-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - datagenius-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLflow Tracking Server (optional)
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: datagenius-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://datagenius:datagenius_password@postgres:5432/mlflow
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - datagenius-network
    restart: unless-stopped
    command: >
      mlflow server
      --backend-store-uri postgresql://datagenius:datagenius_password@postgres:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000

  # Prometheus Metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: datagenius-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - datagenius-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: datagenius-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - datagenius-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: datagenius-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - datagenius-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  datagenius-network:
    driver: bridge